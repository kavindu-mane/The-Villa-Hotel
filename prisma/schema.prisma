generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("MIGRATE_DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum RoomType {
  Deluxe
  Standard
  Superior
}

enum FoodType {
  Fried_Rice
  Kottu
  Soup
  Appetizer
  Nasi_Goraeng
  Pasta
  Desert
  Cheese_Kottu
  Submarine
  Hot
  Mojito
  Milk_Shake
  Fresh_Fruit_juice
  Soft_Drink
}

enum TableType {
  One_Seat
  Two_Seat
  Four_Seat
  Six_Seat
}

enum Status {
  Pending
  Confirmed
  Cancelled
  Ongoing
  Finished
}

enum BookingType {
  Online
  Offline
}

enum BedTypes {
  Two_Single_Beds
  One_Double_Bed
}

model User {
  id               String             @id @default(cuid())
  name             String?
  username         String?            @unique
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  role             Role               @default(USER)
  coins            Float              @default(0)
  account          Account?
  rommReservation  RoomReservation[]
  tableReservation TableReservation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model Rooms {
  id              String            @id @default(cuid())
  number          Int               @unique
  type            RoomType
  price           Float
  persons         Int
  beds            Json
  features        Json
  images          Json
  roomReservation RoomReservation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Foods {
  id                  String                @id @default(cuid())
  foodId              String                @unique
  name                String
  foodType            FoodType
  price               Float
  description         String
  images              Json
  FoodReservationItem FoodReservationItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tables {
  id               String             @id @default(cuid())
  tableId          String             @unique
  tableType        TableType
  price            Float
  description      String
  images           Json
  tableReservation TableReservation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoomReservation {
  id              String            @id @default(cuid())
  reservationNo   Int               @unique @default(autoincrement())
  roomId          String
  userId          String?
  offerId         String?
  name            String?
  email           String?
  phone           String?
  checkIn         DateTime
  checkOut        DateTime
  total           Float             @default(0)
  coins           Float             @default(0)
  pendingBalance  Float             @default(0)
  offerDiscount   Float             @default(0)
  status          Status            @default(Confirmed)
  bed             BedTypes?         @default(One_Double_Bed)
  type            BookingType       @default(Online)
  Payments        Payments[]
  foodReservation FoodReservation[]

  room  Rooms  @relation(fields: [roomId], references: [id])
  user  User?  @relation(fields: [userId], references: [id])
  offer Offer? @relation(fields: [offerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TableReservation {
  id                 String      @id @default(cuid())
  reservationNo      Int         @unique @default(autoincrement())
  tableId            String
  offerId            String?
  userId             String?
  foodReservationsId String?
  name               String
  email              String
  phone              String
  date               DateTime
  timeSlot           String
  total              Float       @default(0)
  coins              Float       @default(0)
  offerDiscount      Float       @default(0)
  status             Status      @default(Confirmed)
  type               BookingType @default(Online)

  table            Tables           @relation(fields: [tableId], references: [id])
  user             User?            @relation(fields: [userId], references: [id])
  foodReservations FoodReservation? @relation(fields: [foodReservationsId], references: [id])
  offer            Offer?           @relation(fields: [offerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FoodReservation {
  id                   String                @id @default(cuid())
  foodId               String
  quantity             Int
  price                Float
  specialRequirement   String?
  roomreservation      RoomReservation[]
  tableReservation     TableReservation[]
  foodReservationItems FoodReservationItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FoodReservationItem {
  id                String @id @default(cuid())
  foodId            String
  foodReservationId String

  food            Foods           @relation(fields: [foodId], references: [id])
  foodReservation FoodReservation @relation(fields: [foodReservationId], references: [id])

  @@unique([foodId, foodReservationId])
}

model Offer {
  id          String   @id @default(cuid())
  code        String   @unique
  discount    Float
  description String
  validFrom   DateTime
  validTo     DateTime

  rommReservation  RoomReservation[]
  tableReservation TableReservation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payments {
  id            String      @id @default(cuid())
  reservationId String
  amount        Float
  paymentType   BookingType

  roomreservation RoomReservation @relation(fields: [reservationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
